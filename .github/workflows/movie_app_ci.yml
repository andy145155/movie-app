name: Continues integration - Movie recommendation app

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: write

env:
  AWS_DEFAULT_REGION: ap-southeast-1
  AWS_CI_IAM_ROLE: arn:aws:iam::410370150231:role/movie-app-github-action-ci

jobs:
  build-app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            app
            deployment/resources

      - name: Set up node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Run yarn in app directory
        run: cd app && yarn

      - name: Build movie app
        run: cd app && yarn build

      - uses: actions/upload-artifact@v4
        with:
          name: artifact-apps
          path: app/dist/
          if-no-files-found: error
          retention-days: 1

  build-api:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            backend
            deployment/resources

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install serverless
        run: npm install --prefix=$HOME/.local --global serverless@^3.39.0

      - name: Run yarn in backend directory
        run: cd backend && yarn install

      # - name: Install unit tests dependencies
      #   run: pip install -r backend/api/tests/requirements.txt

      # - name: Run unit tests
      #   run: cd backend/api && python3 -m pytest -s tests/unit  -v

      - name: Create lambda layers
        run: |
          cd backend/api &&  
          pip install -t layers/python/lib/python3.11/site-packages --platform manylinux2014_aarch64 --only-binary=:all: --upgrade --python-version 3.11 --implementation cp -r requirements.txt

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_CI_IAM_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Build movie api
        run: cd backend/api && sls package --package artifact-api

      - uses: actions/upload-artifact@v4
        with:
          name: artifact-api
          path: backend/api
          if-no-files-found: error
          retention-days: 1

  build-triggered-tasks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            backend
            deployment/resources

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install serverless
        run: npm install --prefix=$HOME/.local --global serverless@^3.39.0

      - name: Run yarn in backend directory
        run: cd backend && yarn install

      - name: Create lambda layers
        run: |
          cd backend/triggered-tasks &&  
          pip install -t layers/python/lib/python3.11/site-packages --platform manylinux2014_aarch64 --only-binary=:all: --upgrade --python-version 3.11 --implementation cp -r requirements.txt

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_CI_IAM_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Build triggered-tasks
        run: cd backend/triggered-tasks && sls package --package artifact-triggered-tasks

      - uses: actions/upload-artifact@v4
        with:
          name: artifact-triggered-tasks
          path: backend/triggered-tasks
          if-no-files-found: error
          retention-days: 1

  build-fargate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            backend
            deployment/resources

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_CI_IAM_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: serverless-movie-app-fargate-dev
          IMAGE_TAG: dataProcessing
        run: |
          cd backend &&
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --build-arg FILE=csvDataProcessing.ts .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  create-git-tag:
    needs: [build-app, build-api, build-triggered-tasks, build-fargate]
    if: ${{ always() && !failure() && !cancelled() }}
    runs-on: ubuntu-latest
    outputs:
      git-tag-name: ${{ steps.generate-tag.outputs.git-tag-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate and push Git Tag
        shell: bash
        id: generate-tag
        run: |
          BUILD_DATE=$(date +'%Y-%m-%d')
          echo "Generated new BUILD_DATE: $BUILD_DATE"

          git fetch origin 'refs/tags/*:refs/tags/*'

          VERSION_PATCH=$(git tag --list "${BUILD_DATE}-v*" --sort=-version:refname | head -n 1 | grep -oE '[0-9]+$' || true)

          echo "Generated new VERSION_PATCH: $VERSION_PATCH"

          if [ -z "$VERSION_PATCH" ]; then
            VERSION_PATCH=1
          else
            VERSION_PATCH=$((VERSION_PATCH + 1))
          fi

          NEW_TAG="${BUILD_DATE}-v${VERSION_PATCH}"
          echo "Generated new tag: $NEW_TAG"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT

          git tag $NEW_TAG
          git push origin $NEW_TAG

  deploy-fargate:
    needs: [create-git-tag]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            backend
            deployment/resources

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_CI_IAM_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Install serverless
        run: npm install --prefix=$HOME/.local --global serverless@^3.39.0

      - name: Run yarn in backend directory
        run: cd backend && yarn install

      - name: Deploy fargate
        run: |
          cd backend/fargate &&
          sls deploy

      - name: Upload serverless output file
        uses: actions/upload-artifact@v4
        with:
          name: serverless-output-artifact-fargate
          path: deployment/resources/sls.fargate.json
          retention-days: 1

  deploy-triggered-tasks:
    needs: [create-git-tag]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            backend
            deployment/resources

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_CI_IAM_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - uses: actions/download-artifact@v4
        with:
          name: artifact-triggered-tasks
          path: backend/triggered-tasks

      - name: Install serverless
        run: npm install --prefix=$HOME/.local --global serverless@^3.39.0

      - name: Deploy triggered-tasks
        run: |
          cd backend/triggered-tasks
          yarn &&
          sls deploy --package artifact-triggered-tasks

      - name: Upload serverless output file
        uses: actions/upload-artifact@v4
        with:
          name: serverless-output-artifact-triggered-tasks
          path: production/resources/sls.triggered-tasks.json
          retention-days: 1

  deploy-api:
    needs: [create-git-tag]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            backend
            deployment/resources

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_CI_IAM_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - uses: actions/download-artifact@v4
        with:
          name: artifact-api
          path: backend/api

      - name: Install serverless
        run: npm install --prefix=$HOME/.local --global serverless@^3.39.0

      - name: Deploy api
        run: |
          cd backend/api
          yarn &&
          sls deploy --package artifact-api

      - name: Upload serverless output file
        uses: actions/upload-artifact@v4
        with:
          name: serverless-output-artifact-api
          path: deployment/resources/sls.api.json
          retention-days: 1

  create-pull-request:
    needs: [deploy-api, deploy-triggered-tasks, deploy-fargate]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: deployment/resources/
          merge-multiple: true

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v6
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        with:
          base: master
          commit-message: Checkin lambda serverless deployment file
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: deployment-lambda-${{ github.run_id }}-${{ github.run_attempt }}
          title: ' Lambda serverless deployment file checkin'
          draft: false
          add-paths: |
            deployment

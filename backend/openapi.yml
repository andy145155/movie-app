openapi: 3.0.2

servers:
  - url: '/dashboard'

info:
  title: movie-app-api
  description: Movie app API
  version: 0.0.1

x-amazon-apigateway-request-validator: all
x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
  params-only:
    validateRequestBody: false
    validateRequestParameters: true

x-amazon-apigateway-cors:
  allowOrigins:
    - '*'
  allowMethods:
    - 'GET'
    - 'OPTIONS'
  allowHeaders:
    - 'x-amzm-header'
    - 'x-apigateway-header'
    - 'x-api-key'
    - 'authorization'
    - 'x-amz-date'
    - 'content-type'

paths:
  /movies:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - CORS
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}

      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                #set($origin = $input.params("Origin"))
                #if($origin == "") #set($origin = $input.params("origin")) #end
                #if($origin.matches(".*")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end
    get:
      security:
        - UserPoolAuthorizer: ['email', 'openid', 'aws.cognito.signin.user.admin']
      operationId: 'getMovies'
      summary: Retrieve a list of Movies from TMDB 5000 datasets
      parameters:
        - name: random
          in: query
          schema:
            type: string
            enum: [true, false]
        - name: number
          in: query
          schema:
            type: integer
            format: int64
        - name: movieIdList
          in: query
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: 200 response
          headers:
            'Access-Control-Allow-Origin':
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  customer:
                    $ref: '#/components/schemas/Movies'
        '400':
          description: 400 response
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - ':lambda:path/2015-03-31/functions/'
              - Fn::GetAtt: ['GetMoviesLambdaFunction', 'Arn']
              - '/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
        responses:
          default:
            statusCode: '200'

  /user/selectedMovies:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - CORS
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}

      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Access-Control-Allow-Origin'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                #set($origin = $input.params("Origin"))
                #if($origin == "") #set($origin = $input.params("origin")) #end
                #if($origin.matches(".*")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end
    get:
      security:
        - UserPoolAuthorizer: ['email', 'openid', 'aws.cognito.signin.user.admin']
      operationId: 'getUserRecommendMovies'
      summary: Retrieve user recommended movies
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 200 response
          headers:
            'Access-Control-Allow-Origin':
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  customer:
                    $ref: '#/components/schemas/UserMovieDetails'
        '400':
          description: 400 response
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - ':lambda:path/2015-03-31/functions/'
              - Fn::GetAtt: ['GetUserRecommendMoviesLambdaFunction', 'Arn']
              - '/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
        responses:
          default:
            statusCode: '200'
    post:
      security:
        - UserPoolAuthorizer: ['email', 'openid', 'aws.cognito.signin.user.admin']
      operationId: 'setUserSelectedMovies'
      summary: Set user selected movie
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
        - name: selectedMovies
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 200 response
          headers:
            'Access-Control-Allow-Origin':
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  customer:
                    $ref: '#/components/schemas/Movies'
        '400':
          description: 400 response
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - ':lambda:path/2015-03-31/functions/'
              - Fn::GetAtt: ['SetUserSelectedMoviesLambdaFunction', 'Arn']
              - '/invocations'
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
        responses:
          default:
            statusCode: '200'

components:
  securitySchemes:
    'UserPoolAuthorizer':
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: 'cognito_user_pools'
      x-amazon-apigateway-authorizer:
        type: 'cognito_user_pools'
        providerARNs: ['${self:custom.MOVIE_APP_USERPOOL_ARN}']
  schemas:
    Body:
      type: object

    Empty:
      type: object

    Movies:
      type: object
      properties:
        movieId:
          type: string
        poster_path:
          type: string
        name:
          type: string
      required:
        - movieId
        - poster_path
        - name
    UserMovieDetails:
      type: object
      properties:
        email:
          type: string
        recommendedMovies:
          type: array
          items:
            type: integer
        selectedMovies:
          type: array
          items:
            type: integer

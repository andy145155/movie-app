service: ${self:custom.app_name}

frameworkVersion: "3"

plugins:
  - serverless-python-requirements
  - serverless-plugin-warmup

custom:
  # serverless-plugin-warmup
  warmup:
    default:
      payload:
        source: warmup

  #serverless-python-requirements
  pythonRequirements:
    dockerizePip: true
    zip: true

  # Environment variables
  app_name: "movie-app"
  stage: "dev"
  tf: ${file(../infrastructure/config.json)}
  LAMBDA_SG_ID: ${self:custom.tf.lambda_security_group_id}
  FARGATE_SG_ID: ${self:custom.tf.fargate_security_group_id}
  PRIVATE_SUBNET_A_ID: ${self:custom.tf.private_subnet_a_id}
  PRIVATE_SUBNET_B_ID: ${self:custom.tf.private_subnet_b_id}
  DEFAULT_LAMBDA_ROLE_ARN: ${self:custom.tf.lambda_iam_role_arn}
  SNS_TOPIC_ARN: ${self:custom.tf.movie_app_sns_arn}
  S3_DATABASE_NAME: ${self:custom.tf.movie_app_database_buckets_name}
  MOVIE_APP_USERPOOL_ARN: ${self:custom.tf.movie_app_user_pool_arn}
  TASK_DEF_PREFIX: dataProcessing

provider:
  name: aws
  region: ap-southeast-1
  runtime: python3.7
  timeout: 300
  stage: "dev"
  iam:
    role: ${self:custom.DEFAULT_LAMBDA_ROLE_ARN}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - iam:PassRole
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:iam::"
            - Ref: "AWS::AccountId"
            - ":role/ecsTaskExecutionRole"
  # If use VPC then both securityGroupIds and subnetIds are required
  vpc:
    securityGroupIds:
      - ${self:custom.LAMBDA_SG_ID}
    subnetIds:
      - ${self:custom.PRIVATE_SUBNET_A_ID}
      - ${self:custom.PRIVATE_SUBNET_B_ID}

package:
  patterns:
    - "!node_modules/**"
    - "!venv/**"

functions:
  triggerFargate:
    handler: functions/dataProcessing/triggerFargate.handler
    warmup:
      default:
        enabled: true
    events:
      - sns:
          arn: ${self:custom.SNS_TOPIC_ARN}
    environment:
      PRIVATE_SUBNET_A_ID: ${self:custom.PRIVATE_SUBNET_A_ID}
      PRIVATE_SUBNET_B_ID: ${self:custom.PRIVATE_SUBNET_B_ID}
      FARGATE_SG_ID: ${self:custom.FARGATE_SG_ID}
      CLUSTER_PREFIX: ${self:custom.app_name}
      TASK_DEF_PREFIX: ${self:custom.TASK_DEF_PREFIX}
  csvToS3Database:
    handler: functions/dataProcessing/csvToS3Database.handler
    warmup:
      default:
        enabled: true
    events:
      - sns:
          arn: ${self:custom.SNS_TOPIC_ARN}
  triggerGlueCrawler:
    handler: functions/dataProcessing/triggerGlueCrawler.handler
    warmup:
      default:
        enabled: true
    events:
      - s3:
          bucket: ${self:custom.S3_DATABASE_NAME}
          event: s3:ObjectCreated:*
          existing: true
  getMovies:
    handler: functions/api/getMovies.handler
    warmup:
      default:
        enabled: true
  setUserSelectedMovies:
    handler: functions/api/setUserSelectedMovies.handler
    warmup:
      default:
        enabled: true
  getUserRecommendMovies:
    handler: functions/api/getUserRecommendMovies.handler
    warmup:
      default:
        enabled: true

resources:
  Resources:
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Body: ${file(./openapi.yml)}
    ApiGatewayDeployment:
      Type: AWS::ApiGateway::Deployment
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
    ApiGatewayStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        StageName: v1
        DeploymentId: !Ref ApiGatewayDeployment
    ApiGatewayBasePathMapping:
      Type: AWS::ApiGateway::BasePathMapping
      Properties:
        DomainName: api.movieapp.paohenghsu.com
        RestApiId:
          Ref: ApiGatewayRestApi
        Stage:
          Ref: ApiGatewayStage
    PermissionToGetMovies:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt:
            - GetMoviesLambdaFunction
            - Arn
        Action: lambda:InvokeFunction
        Principal: apigateway.amazonaws.com
    PermissionToSetUserSelectedMovies:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt:
            - SetUserSelectedMoviesLambdaFunction
            - Arn
        Action: lambda:InvokeFunction
        Principal: apigateway.amazonaws.com
    PermissionToGetUserRecommendMovies:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt:
            - GetUserRecommendMoviesLambdaFunction
            - Arn
        Action: lambda:InvokeFunction
        Principal: apigateway.amazonaws.com
